####################################################
# Things to run in the IPython console inside Spyder
# --------------------------------------------------
#
# * Standard integrator using Python's odeint
#   (cartPendOdeInt.py)
#   - Free system
####################################################
from numpy import array, cos, sin, pi, zeros, append, sin, cos, linspace, pi
from cartPendOdeInt import cartPendvecField, cartPendjacobian
from parameterStructure import paramStruct
from scipy.integrate import odeint
from scipy.stats import norm

nsteps = 500
param = paramStruct(cartMass=1./2, bobMass=1./4, poleLength=1., gravity=3./4) #You should try different sets of parameters
t0 = 0
Y = array([0,pi/4,0,0])
f = lambda t: 0
u = lambda t, x, theta, vx, vtheta: 0
du = lambda t, x, theta, vx, vtheta: zeros(5)
h = 0.1
T = t0 + linspace(0,nsteps,nsteps+1)*h

odeintSol = odeint(cartPendvecField, Y, T, args=(f, u, du, param), Dfun=cartPendjacobian)

####################################################
#   - Forced system
####################################################
f = lambda t: norm.pdf(t, 8, 0.25)/10 - norm.pdf(t, 27, 0.25)/15 #You should try different forcing patterns
odeintSol = odeint(cartPendvecField, Y, T, args=(f, u, du, param), Dfun=cartPendjacobian)

####################################################
#   - Controlled system
####################################################
u = lambda t, x, theta, vx, vtheta: -sin(theta)/8 #You should try different control patterns and remember to change its gradient
du = lambda t, x, theta, vx, vtheta: array([0,0,-cos(theta)/8,0,0])
odeintSol = odeint(cartPendvecField, Y, T, args=(f, u, du, param), Dfun=cartPendjacobian)

####################################################
#   - LQR stabilized system - Controlled so that the final position of the cart is at x = 0
####################################################
Y = array([0,pi-1./10,0,0])
X_stb = array([0,pi,0,0])
K = array([ -0.031622776601684, 1.492798728352806, -0.281868190753674, 1.491486292367204]) #If possible, try to compute other K matrices in Matlab
u = lambda t, x, theta, vx, vtheta: -(K[0]*(x-X_stb[0])+K[1]*(theta-X_stb[1])+K[2]*(vx-X_stb[2])+K[3]*(vtheta-X_stb[3]))
du = lambda t, x, theta, vx, vtheta: -array([0,K[0],K[1],K[2],K[3]])
odeintSol = odeint(cartPendvecField, Y, T, args=(f, u, du, param), Dfun=cartPendjacobian)

####################################################
#   - LQR stabilized system - No imposition over x position
####################################################
u = lambda t, x, theta, vx, vtheta: -(-K[0]*X_stb[0]+K[1]*(theta-X_stb[1])+K[2]*(vx-X_stb[2])+K[3]*(vtheta-X_stb[3]))
du = lambda t, x, theta, vx, vtheta: -append([0,0],K[1:])
odeintSol = odeint(cartPendvecField, Y, T, args=(f, u, du, param), Dfun=cartPendjacobian)

####################################################
#To animate, uncomment the corresponding commented lines in animCartPend.py and run the file